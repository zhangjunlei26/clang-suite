From a56d20e76b88d28f67c2a6a502235f600c49d594 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20G=C3=B3rny?= <mgorny@gentoo.org>
Date: Sat, 8 Oct 2016 23:58:12 +0200
Subject: [PATCH 06/13] [Driver] Add rpaths for internal libdirs

---
 lib/Driver/ToolChains.cpp |  7 ++++++
 lib/Driver/Tools.cpp      | 54 +++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 61 insertions(+)

diff --git a/lib/Driver/ToolChains.cpp b/lib/Driver/ToolChains.cpp
index 7896b44..5ab98e6 100644
--- a/lib/Driver/ToolChains.cpp
+++ b/lib/Driver/ToolChains.cpp
@@ -3739,6 +3739,7 @@ Solaris::Solaris(const Driver &D, const llvm::Triple &Triple,
   GCCInstallation.init(Triple, Args);
 
   path_list &Paths = getFilePaths();
+
   if (GCCInstallation.isValid())
     addPathIfExists(D, GCCInstallation.getInstallPath(), Paths);
 
@@ -4160,6 +4161,12 @@ Linux::Linux(const Driver &D, const llvm::Triple &Triple, const ArgList &Args)
   // to the link paths.
   path_list &Paths = getFilePaths();
 
+  // Add rpaths for compiler dirs (set in ToolChain::ToolChain())
+  for (const auto& p : Paths) {
+    ExtraOpts.push_back("-rpath");
+    ExtraOpts.push_back(p);
+  }
+
   const std::string OSLibDir = getOSLibDir(Triple, Args);
   const std::string MultiarchTriple = getMultiarchTriple(D, Triple, SysRoot);
 
diff --git a/lib/Driver/Tools.cpp b/lib/Driver/Tools.cpp
index 2646b95..82ebe7a 100644
--- a/lib/Driver/Tools.cpp
+++ b/lib/Driver/Tools.cpp
@@ -7898,6 +7898,26 @@ void darwin::Linker::AddLinkArgs(Compilation &C, const ArgList &Args,
   if (Args.hasArg(options::OPT_rdynamic) && Version[0] >= 137)
     CmdArgs.push_back("-export_dynamic");
 
+  SmallString<128> ArchP(D.ResourceDir);
+  llvm::sys::path::append(ArchP, "lib", "darwin", llvm::Triple::getArchTypeName(MachOTC.getArch()));
+  if (llvm::sys::fs::exists(Twine(ArchP))) {
+    const char* ArchPAS = Args.MakeArgString(ArchP);
+    CmdArgs.push_back("-L");
+    CmdArgs.push_back(ArchPAS);
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back(ArchPAS);
+  }
+
+  SmallString<128> P(D.ResourceDir);
+  llvm::sys::path::append(P, "lib", "darwin");
+  if (llvm::sys::fs::exists(Twine(P))) {
+    const char* PAS = Args.MakeArgString(P);
+    CmdArgs.push_back("-L");
+    CmdArgs.push_back(PAS);
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back(PAS);
+  }
+
   // If we are using App Extension restrictions, pass a flag to the linker
   // telling it that the compiled code has been audited.
   if (Args.hasFlag(options::OPT_fapplication_extension,
@@ -8366,6 +8386,24 @@ void solaris::Linker::ConstructJob(Compilation &C, const JobAction &JA,
 
   getToolChain().AddFilePathLibArgs(Args, CmdArgs);
 
+  const Driver &D = getToolChain().getDriver();
+  SmallString<128> ArchP(D.ResourceDir);
+  llvm::sys::path::append(ArchP, "lib", "solaris", llvm::Triple::getArchTypeName(getToolChain().getArch()));
+  if (llvm::sys::fs::exists(Twine(ArchP))) {
+    const char* ArchPAS = Args.MakeArgString(ArchP);
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back(ArchPAS);
+  }
+
+  SmallString<128> P(D.ResourceDir);
+  llvm::sys::path::append(P, "lib", "solaris");
+  if (llvm::sys::fs::exists(Twine(P))) {
+    const char* PAS = Args.MakeArgString(P);
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back(PAS);
+  }
+
+
   Args.AddAllArgs(CmdArgs, {options::OPT_L, options::OPT_T_Group,
                             options::OPT_e, options::OPT_r});
 
@@ -8888,6 +8926,22 @@ void freebsd::Linker::ConstructJob(Compilation &C, const JobAction &JA,
     assert(Output.isNothing() && "Invalid output.");
   }
 
+  SmallString<128> ArchP(D.ResourceDir);
+  llvm::sys::path::append(ArchP, "lib", "freebsd", llvm::Triple::getArchTypeName(getToolChain().getArch()));
+  if (llvm::sys::fs::exists(Twine(ArchP))) {
+    const char* ArchPAS = Args.MakeArgString(ArchP);
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back(ArchPAS);
+  }
+
+  SmallString<128> P(D.ResourceDir);
+  llvm::sys::path::append(P, "lib", "freebsd");
+  if (llvm::sys::fs::exists(Twine(P))) {
+    const char* PAS = Args.MakeArgString(P);
+    CmdArgs.push_back("-rpath");
+    CmdArgs.push_back(PAS);
+  }
+
   if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nostartfiles)) {
     const char *crt1 = nullptr;
     if (!Args.hasArg(options::OPT_shared)) {
-- 
2.10.1

