<project>
    <shortName>@MAIN_PACKAGE_NAME@</shortName>
    <fullName>PathScale clang-suite</fullName>
    <version>@PSC_FULL_VERSION@</version>
    <enableRollback>1</enableRollback>
    <enableTimestamp>1</enableTimestamp>
    <vendor>PathScale</vendor>
    <outputDirectory>.</outputDirectory>
    <installerFilename>@INSTALLER_FILE_NAME@</installerFilename>
    <allowComponentSelection>@INSTALL_TYPE_INSTALL@</allowComponentSelection>
    <installationType>@INSTALL_TYPE@</installationType>

    <registerWithPackageDatabase>1</registerWithPackageDatabase>
	<summary>PathScale(tm) Clang Compiler Suite</summary>
    <release>0</release>
	<description>The PathScale Clang compiler suite provides pre-built packages of the open-source clang compiler.</description>

    <componentList>
@PATH64_COMPONENTS@
    </componentList>

    <parameterList>

        <licenseParameter>
            <ask>@INSTALL_TYPE_INSTALL@</ask>
            <name>license1</name>
            <fileEncoding>utf-8</fileEncoding>
            <wrapText>1</wrapText>
			<file>@CMAKE_CURRENT_SOURCE_DIR@/ekopath/psllvm/LICENSE.TXT</file>
            <ruleList>
                <compareText>
                    <text>${project.installationtype}</text>
                    <logic>equals</logic>
                    <value>normal</value>
                </compareText>
            </ruleList>
        </licenseParameter>

        <licenseParameter>
            <ask>@INSTALL_TYPE_INSTALL@</ask>
            <name>license2</name>
            <fileEncoding>utf-8</fileEncoding>
            <wrapText>1</wrapText>
			<file>@CMAKE_CURRENT_SOURCE_DIR@/ekopath/psllvm/lib/Support/COPYRIGHT.regex</file>
            <ruleList>
                <compareText>
                    <text>${project.installationtype}</text>
                    <logic>equals</logic>
                    <value>normal</value>
                </compareText>
            </ruleList>
        </licenseParameter>

        <licenseParameter>
            <ask>@INSTALL_TYPE_INSTALL@</ask>
            <name>license3</name>
            <fileEncoding>utf-8</fileEncoding>
            <wrapText>1</wrapText>
			<file>@CMAKE_CURRENT_SOURCE_DIR@/ekopath/psllvm/lib/Target/ARM/LICENSE.TXT</file>
            <ruleList>
                <compareText>
                    <text>${project.installationtype}</text>
                    <logic>equals</logic>
                    <value>normal</value>
                </compareText>
            </ruleList>
        </licenseParameter>

        <licenseParameter>
            <ask>@INSTALL_TYPE_INSTALL@</ask>
            <name>license4</name>
            <fileEncoding>utf-8</fileEncoding>
            <wrapText>1</wrapText>
			<file>@CMAKE_CURRENT_SOURCE_DIR@/installbuilder/MD5-LICENSE.txt</file>
            <ruleList>
                <compareText>
                    <text>${project.installationtype}</text>
                    <logic>equals</logic>
                    <value>normal</value>
                </compareText>
            </ruleList>
        </licenseParameter>

        <licenseParameter>
            <ask>@INSTALL_TYPE_INSTALL@</ask>
            <name>license5</name>
            <fileEncoding>utf-8</fileEncoding>
            <wrapText>1</wrapText>
			<file>@CMAKE_CURRENT_SOURCE_DIR@/ekopath/libcxxrt/LICENSE</file>
            <ruleList>
                <compareText>
                    <text>${project.installationtype}</text>
                    <logic>equals</logic>
                    <value>normal</value>
                </compareText>
            </ruleList>
        </licenseParameter>

        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value></value>
            <default>${platform_install_prefix}/${product_shortname}-${product_version}</default>
            <allowEmptyValue>0</allowEmptyValue>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>30</width>

            <!-- checking existing installation for upgrade installer -->
            <validationActionList>
                <actionGroup>
                    <actionList>
                        <setInstallerVariable name="errmsg">
                            <value>Can not find existing ${project.fullName} installation in selected directory</value>
                        </setInstallerVariable>
                        <throwError>
                            <text>${errmsg}</text>
                            <ruleList>
                                <fileExists negate="1">
                                    <path>${installdir}/enzo_components</path>
                                </fileExists>
                            </ruleList>
                        </throwError>

                        <!-- reading list of components -->
                        <readFile>
                            <path>${installdir}/enzo_components</path>
                            <name>enzo_components</name>
                        </readFile>

                        <foreach variables="comp" values="${enzo_components}">
                            <actionList>
                                <setInstallerVariable name="project.component(${comp}).selected" value="1"/>
                            </actionList>
                        </foreach>

                    </actionList>
                    <ruleList>
                        <isTrue value="@INSTALL_TYPE_UPGRADE@"/>
                    </ruleList>
                </actionGroup>
            </validationActionList>
        </directoryParameter>
    </parameterList>

    <preInstallationActionList>
        <!-- deselecting all components for upgrade -->
        <actionGroup>
            <actionList>
                <foreach variables="comp" values="@PATH64_COMPONENT_LIST@">
                    <actionList>
                        <setInstallerVariable name="project.component(${comp}).selected" value="0"/>
                    </actionList>
                </foreach>
            </actionList>
            <ruleList>
                <isTrue value="@INSTALL_TYPE_UPGRADE@"/>
            </ruleList>
        </actionGroup>
    </preInstallationActionList>

    <postInstallationActionList>
        <actionGroup>
            <actionList>
                <!-- Writing list of components -->
                <setInstallerVariable name="enzo_components" value=""/>
                <foreach variables="comp" values="@PATH64_COMPONENT_LIST@">
                    <actionList>
                        <actionGroup>
                            <actionList>
                                <setInstallerVariable name="enzo_components" value="${enzo_components} ${comp}"/>
                            </actionList>
                            <ruleList>
                                <isTrue value="${project.component(${comp}).selected}"/>
                            </ruleList>
                        </actionGroup>
                    </actionList>
                </foreach>
                <writeFile>
                    <path>${installdir}/enzo_components</path>
                    <text>${enzo_components}</text>
                </writeFile>
                <addFilesToUninstaller>
                    <files>${installdir}/enzo_components</files>
                </addFilesToUninstaller>

                @POST_INSTALL_ACTION_LIST@
            </actionList>
            <ruleList>
                <isTrue value="@INSTALL_TYPE_INSTALL@"/>
            </ruleList>
        </actionGroup>
    </postInstallationActionList>

    <readyToInstallActionList>
        @READY_TO_INSTALL_ACTION_LIST@
    </readyToInstallActionList>
</project>

